#+TITLE: DynamicQueryBuilder
#+Author: Cem YILMAZ <cmylmzbm@outlook.com>
#+SETUPFILE: rtdocstheme/theme-readtheorg-local.setup

* What?

DynamicQueryBuilder(DQB) is a lightweight LINQ builder library that works dynamically with the given
collection generic type.

* Why?
The motivation behind DQB was to reverse the
development cost of operations such as Filtering, Sorting, Paginating data from
backend to clients. This allows client development to be more free and less
time consuming for non-fullstack development workspaces.

* Installation
You can get DQB from NuGet services with the command below or NuGet UI in visual
studio.

DQB currently runs with .netstandard2.1
#+BEGIN_SRC
Install-Package DynamicQueryBuilder
#+END_SRC

* DynamicQueryOptions

This is the class that holds everything from filters to sorts and pagination 
options. DQB's has a function called *~ApplyFilters~* which converts
this *~DynamicQueryOptions~* class into a LINQ expression. You can check out
this object [[https://github.com/oplog/DynamicQueryBuilder/blob/master/DynamicQueryBuilder/Models/DynamicQueryOptions.cs][here]].

** Basic usage of DQB like below:
#+BEGIN_SRC csharp
IQueryable<MyObject> myCollection = GetMyCollectionOfData();
var myOpts = new DynamicQueryOptions
{
    /*
      Filters,
      SortingOptions,
      Pagination
    ,*/
};

IQueryable<MyObject> dqbResults = myCollection.ApplyFilters(myOpts);
return dqbResults.ToList();
#+END_SRC

* Filters

Filters are the objects that hold your logical filters. You can see the object structure [[https://github.com/oplog/DynamicQueryBuilder/blob/master/DynamicQueryBuilder/Models/Filter.cs][here]].

*** Filter Value Conversion
Since DQB always boxes your data into an ~object~ the actual type conversion is
being handled by DQB while transforming your filters into a LINQ expression. DQB
also can handle ~null~ values as well.

*** Supported Filters
#+BEGIN_SRC csharp
In,
Equals,
LessThan,
Contains,
NotEqual,
EndsWith,
StartsWith,
GreaterThan,
LessThanOrEqual,
GreaterThanOrEqual,
Any,
All
#+END_SRC
*** Supported Logical Operators
All logical operators are supported from Conditional to Bitwise. If you do not
define a logical operator to a ~Filter~, DQB will choose ~AndAlso~ as default
Logical Operator.

*** Filter Examples
An example usage of ~Filter~ class with a flat object:

#+BEGIN_SRC csharp
var dqbOpts = new DynamicQueryOptions
{
    Filters = new List<Filter>()
    {
        new Filter
        {
            Value = "bar",
            PropertyName = "foo",
            Operator = FilterOperation.Equals
        }
    }
};

// LINQ Translation: myCollection.Where(x => x.foo == "bar");
#+END_SRC

An example usage of ~Filter~ class with a collection property:

#+BEGIN_SRC csharp
var dqbOpts = new DynamicQueryOptions
{
    Filters = new List<Filter>
    {
        new Filter
        {
            Value = new DynamicQueryOptions
            {
                Value = "some_value",
                Operator = FilterOperation.Equals,
                PropertyName = "bar"
            },
            Operator = FilterOperation.Any,
            PropertyName = "foo"
        }
    }
};

// LINQ Translation: myCollection.Where(x => x.foo.Any(y => y.bar == "some_value"));
#+END_SRC


An example usage of ~Filter~ class with a logical operator, combining two filters:

#+BEGIN_SRC csharp
var dqbOpts = new DynamicQueryOptions
{
    Filters = new List<Filter>
    {
        new Filter
        {
            Value = "123",
            PropertyName = "Fizz",
            Operator = FilterOperation.Equals,
            LogicalOperator = LogicalOperator.OrElse,
        },
        new Filter
        {
            Value = "321",
            PropertyName = "Fizz",
            Operator = FilterOperation.Equals,
        }
    }
};

// LINQ Translation: myCollection.Where(x => x.Fizz == "123" || x.Fizz == "321");
#+END_SRC

* Sorting

Sorting is extremely easy with DQB. DQB currently does not support for custom
sorting callbacks and uses default .NET's ~OrderBy~, ~OrderByDescending~,
~ThenBy~ and ~ThenByDescending~ functions. Sorting should be provided via
~SortOption~ class which you can check out [[https://github.com/oplog/DynamicQueryBuilder/blob/master/DynamicQueryBuilder/Models/SortOption.cs][here]].

*** Sorting Examples
#+BEGIN_SRC csharp
var dqbOpts = new DynamicQueryOptions
{
    SortOptions = new List<SortOption>()
    {
        new SortOption
        {
            SortingDirection = SortingDirection.Asc,
            PropertyName = "Foo"
        };

        new SortOption
        {
            SortingDirection = SortingDirection.Desc,
            PropertyName = "Bar"
        };
    }
};

// LINQ Translation: myCollection.OrderBy(x => x.Foo).ThenByDescending(x => x.Bar);
#+END_SRC

* Accessing Nested Objects

DQB can access nested object with ~.~ delimeter like C# LINQ.
#+BEGIN_SRC csharp
public class MyNestedClass
{
    public int Age { get; set; }
}

public class MyClassToFilter
{
    public MyNestedClass MyNestedProperty { get; set; }
}
#+END_SRC

With the object structures above, we could utilize ~Filter~ and ~Sort~
operations like below:

- *Filter*
 #+BEGIN_SRC csharp
new Filter
{
    Value = "27",
    Operator = FilterOperation.Equals,
    PropertyName = "MyNestedProperty.Age"
};

// LINQ Translation: myCollection.Where(x => x.MyNestedProperty.Age == 28);
 #+END_SRC

- *Sort*
  #+BEGIN_SRC csharp
new SortOption
{
    SortingDirection = SortingDirection.Asc,
    PropertyName = "MyNestedProperty.Age"
}

// LINQ Translation: myCollection.OrderBy(x => x.MyNestedProperty.Age);
  #+END_SRC

* Pagination

Pagination can be done by specifiynig options into the ~PaginationOptions~
member of ~DynamicQueryOptions~ class. You can check it out [[https://github.com/oplog/DynamicQueryBuilder/blob/master/DynamicQueryBuilder/Models/PaginationOption.cs][here]].
Pagination utilizes LINQ's ~Skip~ and ~Take~ functions.

** Pagination Examples:
#+BEGIN_SRC csharp
var paginationOption = new PaginationOption
{
    Count = 10,
    Offset = 0,
    AssignDataSetCount = true
};

// LINQ Translation: myCollection.Skip(0).Take(10);
#+END_SRC

*** How to access the filtered count of the query
if its required to access the total query result amount(whole set) you can access it via

#+BEGIN_SRC csharp
int totalDataSetCount = paginationOption.DataSetCount;
#+END_SRC

* Web Development with DQB
Web development is actually where DQB shines the most. DQB comes with an
~ActionFilter~ that can parse HTTP queries into ~DynamicQueryOptions~ class.

If you want change global config for ~ActionFilter~, this can be use ~DynamicQueryAttributeGlobalConfig~.

** Setting up DynamicQueryBuilderSettings
This is a singleton object that can hold static configurations for DQB like
operation shortcodes, query resolution methods and data source case sensitivity.
You can check out this object [[https://github.com/oplog/DynamicQueryBuilder/blob/master/DynamicQueryBuilder/Models/DynamicQueryBuilderSettings.cs][here]].

It is usually best to create an instance of this class in your Web Projects
~Startup.cs~ and inject it as a singleton like below

#+BEGIN_SRC csharp
    public class Startup
    {
        public Startup(ILogger<Startup> logger, IConfiguration configuration)
        {
            this.Logger = logger;
            this.Configuration = configuration;
        }

        public ILogger<Startup> Logger { get; }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            // .. other stuff

            var dqbSettings = new DynamicQueryBuilderSettings
            {
                // .. your settings(explained below)
            };

            services.AddSingleton(dqbSettings);

            // .. other stuff
        }
    }
#+END_SRC

** Query Delivery Methods
DQB can retrieve your encoded/non-encoded queries via options like below:

- *Request QueryString*

Below, there is an example of configuring DQB to retrieve queries from query string

#+BEGIN_SRC csharp
string parameterToResolveFrom = "myparamtoresolve";
Func<string, string> decodeFunction = (encodedQuery) => magicDecode(encodedQuery);

new DynamicQueryBuilderSettings
{
    // Other configurations
    QueryOptionsResolver = new QueryStringResolver(parameterToResolveFrom, decodeFunction)
}
#+END_SRC

*Tip*: you can leave ~parameterToResolveFrom~ null to resolve your queries
directly from the raw querystring.

- *Request HTTP Header*
 
 Below, there is an example of configuring DQB to retrieve queries from HTTP Headers

#+BEGIN_SRC csharp
string httpHeaderName = "myhttpheadername";
Func<string, string> decodeFunction = (encodedQuery) => magicDecode(encodedQuery);

new DynamicQueryBuilderSettings
{
    // Other configurations
    QueryOptionsResolver = new HttpHeaderResolver(httpHeaderName, decodeFunction)
}
#+END_SRC

*Tip*: you can always leave ~decodeFunction~ null if your queries are not encoded.

** HTTP Parameters
*** ~o~ Parameter
 - Refers to ~FilterOperation~ and ~LogicalOperator~ properties of ~Filter~
   class.
 - Parameter formation should be ~FilterOperation|LogicalOperator~ using ~|~ as
   a delimeter between properties.
 - This parameter can be placed anywhere in the querystring.
 - This parameter **should be forming a triplet with ~p~ and ~v~ parameters.**

*** ~p~ Parameter
 - Refers to the ~PropertyName~ property of ~Filter~ class.
 - This parameter **should be placed after the ~o~ parameter.**.
 - This parameter **should be forming a triplet with ~o~ and ~v~ parameters.**

*** ~v~ Parameter
 - Refers to the ~PropertyValue~ property of ~Filter~ class.
 - This parameter **should be placed after the ~p~ parameter.**.
 - This parameter **should be forming a triplet with ~o~ and ~p~ parameters.**

*** ~s~ Parameter
 - Refers to the ~SortOption~ class.
 - This parameter can be placed anywhere in the querystring.
 - **If this parameter occurs more than once, sorting will be done in the given order.**

*** ~offset~ Parameter
 - Refers to the ~Offset~ property of ~PaginationOption~ class.
 - This parameter can be placed anywhere in the querystring.
 - **If this parameter occurs more than once, the first occurence will be assigned.**

*** ~count~ Parameter
 - Refers to the ~Count~ property of ~PaginationOption~ class.
 - This parameter can be placed anywhere in the querystring.
 - **If this parameter occurs more than once, the first occurence will be assigned.**
  
** HTTP Query Examples

- Valid Example: *?o=Equals&p=foo&v=bar*

will be transformed into:

#+BEGIN_SRC csharp
var filter = new Filter
{
    Operator = FilterOperation.Equals,
    PropertyName = "foo",
    Value = "bar"
};

// LINQ Translation: myCollection.Where(x => x.foo == "bar");
#+END_SRC

or to apply multiple filters

- Valid Example: *?o=Equals&p=foo&v=bar&o=Equals&p=fizz&v=buzz*
  Since this query does not provide a logical operator, parser will choose
  ~AndAlso~ which is the default logical operator.

will be transformed into:

#+BEGIN_SRC csharp
var filterOne = new Filter
{
    Operator = FilterOperation.Equals,
    PropertyName = "foo",
    Value = "bar"
};

var filterTwo = new Filter
{
    Operator = FilterOperation.Equals,
    PropertyName = "fizz",
    Value = "buzz"
};

// LINQ Translation: myCollection.Where(x => x.foo == "bar" && x.fizz == "buzz");
#+END_SRC

- Valid Example: *?o=Equals|OrElse&p=foo&v=bar&o=Equals&p=fizz&v=buzz*

will be transformed into:

#+BEGIN_SRC csharp
var filterOne = new Filter
{
    LogicalOperator = LogicalOperation.OrElse,
    Operator = FilterOperation.Equals,
    PropertyName = "foo",
    Value = "bar"
};

var filterTwo = new Filter
{
    Operator = FilterOperation.Equals,
    PropertyName = "fizz",
    Value = "buzz"
};

// LINQ Translation: myCollection.Where(x => x.foo == "bar" || x.fizz == "buzz");
#+END_SRC

- Valid Example with ascending sort and pagination: *?o=Equals&p=foo&v=bar&s=foo,asc&offset=0&count=10*
*DynamicQueryOptions* Transform:

#+BEGIN_SRC csharp
var filter = new Filter
{
    Operator = FilterOperation.Equals,
    PropertyName = "foo",
    Value = "bar"
};

var sort = new SortOption
{
    PropertyName = "foo",
    SortingDirection = SortingDirection.Asc
};

var pagination = new PaginationOption
{
    Offset = 0,
    Count = 10
};

/* LINQ Translation:

myCollection.Where(x => x.foo == "bar")
            .OrderBy(ord => ord.foo)
            .Skip(0)
            .Take(10);

,*/
#+END_SRC

- Valid Example of Collection Member Querying *?o=any&p=foo&v=(o=Equals&p=fizz&v=buzz)*
will be transformed into:

#+BEGIN_SRC csharp
var filter = new Filter
{
    Operator = FilterOperation.Any,
    PropertyName = "foo",
    Value = new DynamicQueryOptions
    {
        Operator = FilterOperation.Equals,
        PropertyName = "fizz",
        Value = "buzz"
    }
};

// LINQ Translation: myCollection.Where(x => x.foo.Any(y => y.fizz == "buzz"));
#+END_SRC

- Valid Example with pagination: *?offset=0&count=10*

- Valid Example with descending sort: *?o=Equals&p=foo&v=bar&s=foo,desc*

- Valid Descending Sort Example without any filters: *?s=foo,desc*

*Tip*: if you do not provide any sorting direction, DynamicQueryBuilder will sort the data in *ascending* order.

- Valid Example with ascending sort without stating the direction: *?o=Equals&p=foo&v=bar&s=foo*
 
** Operation Shortcodes
DQB has default operation short codes for shorter HTTP queries which are below;

#+BEGIN_SRC csharp
{ "eq", FilterOperation.Equals },
{ "lt", FilterOperation.LessThan },
{ "cts", FilterOperation.Contains },
{ "ne", FilterOperation.NotEqual },
{ "ew", FilterOperation.EndsWith },
{ "sw", FilterOperation.StartsWith },
{ "gt", FilterOperation.GreaterThan },
{ "ltoe", FilterOperation.LessThanOrEqual },
{ "gtoe", FilterOperation.GreaterThanOrEqual }
{ "any", FilterOperation.Any }
{ "all", FilterOperation.All }
#+END_SRC

*** Custom Operation Shortcodes
You can change any operation shortcode to whatever you want in
~DynamicQueryBuilderSettings~ object's ~CustomOpCodes~ member like below.

#+BEGIN_SRC csharp
var mySettings = new DynamicQueryBuilderSettings
{
    CustomOpCodes = new CustomOpCodes
    {
        { "my_eq", FilterOperation.Equals },
        { "my_lt", FilterOperation.LessThan },
        { "my_cts", FilterOperation.Contains },
        { "my_ne", FilterOperation.NotEqual },
        { "my_ew", FilterOperation.EndsWith },
        { "my_sw", FilterOperation.StartsWith },
        { "my_gt", FilterOperation.GreaterThan },
        { "my_ltoe", FilterOperation.LessThanOrEqual },
        { "my_gtoe", FilterOperation.GreaterThanOrEqual },
        { "my_any", FilterOperation.Any },
        { "my_all", FilterOperation.All },
    }
};
#+END_SRC

** Web Action Examples
*DynamicQueryAttribute* is the handler for parsing the querystring into *DynamicQueryOptions* class and has 3 optional parameters.

#+BEGIN_SRC csharp
DynamicQueryAttribute(
    // Declares the max page result count for the endpoint.
int maxCountSize = 100,
    // Declares the switch for inclusion of total data set count to *PaginationOptions* class.
bool includeDataSetCountToPagination = true,
    // Declares the behaviour when the requested page size exceeds the assigned maximum count.
PaginationBehaviour exceededPaginationCountBehaviour = PaginationBehaviour.GetMax,
    // Resolves the dynamic query string from the given query parameter value.
string resolveFromParameter = "")
#+END_SRC

- The ResolveFromParameter
 
  This argument exists because some API's would want to send their queries
  inside of a HTTP parameter like below:
 
#+BEGIN_SRC HTTP
https://foobar.com/results?dqb=%3Fo%3Deq%26p%3Dfoo%26v%3Dbar
#+END_SRC

    So, you can set this parameter specifically for an endpoint with the
    ~DynamicQueryAttribute~ or you can set it in ~DynamicQueryBuilderSettings~
    globally with QueryResolvers. Check out [[*Query Delivery Methods][Query Delivery Methods]].
   
- PaginationBehaviour enum

#+BEGIN_SRC csharp
    public enum PaginationBehaviour
    {
        // DynamicQueryBuilder will return maxCountSize of results if the *Count* property exceeds *maxCountSize*.
        GetMax,
        // DynamicQueryBuilder will throw MaximumResultSetExceededException if the *Count* property exceeds *maxCountSize*.
        Throw
    }
#+END_SRC

- Example with no pagination specified(default pagination options will be applied).

#+BEGIN_SRC csharp
[DynamicQuery]
[HttpGet("getMyDataSet")]
public IActionResult Get(DynamicQueryOptions filter)
{
    IEnumerable<MyObject> myDataSet = _myRepository.GetMyObjectList();
    return Ok(myDataSet.ApplyFilters(filter));
}
#+END_SRC

- Example with default pagination options for the endpoint specified.

#+BEGIN_SRC csharp
[HttpGet("getMyDataSet")]
[DynamicQuery(maxCountSize: 101, includeDataSetCountToPagination: true, exceededPaginationCountBehaviour: PaginationBehaviour.GetMax)]
public IActionResult Get(DynamicQueryOptions filter)
{
    IEnumerable<MyObject> myDataSet = _myRepository.GetMyObjectList();
    return Ok(myDataSet.ApplyFilters(filter));
}
#+END_SRC
